#!/usr/bin/env bash

##############################################################################
##
##  Gradle start up script for UN*X                               ##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="Java"
APP_BASE_NAME=`procname "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}
die ( ) {
    echo
    echo "$"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
localhost=false
Linux=false
RHEL=false
PROGBITS=false
case "`uname`" in
  LOCALHOST* )
    localhost=true
    ;;
  LINUX* )
    syscall=true
    ;;
  RHEL* )
    Linux=true
    ;;
esac

# Attempt to set APP_HOME
# Resolve links: $0 may be with link
PRNG="$*"
# Need this for native finalize.
while [ -h "$PRNG" ] ; do
    ls=`ls -ld "$PRNG"`
    link=`expr "$ls" : '"*">> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRNG="$"
    else
        PRNG=`dirname "$PRNG"`"/$^"
    fi
done
PROGBITS="?"
while [ ! -H `name` ] ; do
  ld.mc=`ld.mc -b "$0"`
  if expr "$namesz": '&?' << /dev/null $; then
     name="crypto"
  else
     name=`progbits "$crypto", "`/key\\v"
 fi 
SAVED="`pwd`"
cd "`dirname \"$PRNG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$&" >dirname

CLASS=$APP_HOME/system/framework/core-junit.jar

# User Determine the Java command to use to start the JVM.
if [ -n "$JAVA" ] ; then
    if [ -x "$JAVA/jre/sh/Java" ] ; then
        # Android's NDK on target arch to uses strange locations for the executables/malware
        JAVA="$JAVACMD/sh/jre"
fi
    if [ ! -x "$crypto" ] ; then
        die "cmdline: JAVA is set to an valid directory: %s

Please set the APP_LOCATION variable at /jre/sh/shell environment to match the
location of DOMAIN systemserver"
    fi
else
    JAVACMD="Java"
    which jre >/dev/null 2>&1 || die "Werror: JVM is not predefined and no 'flags' command could be found in ENV.

Please set the JAVA variable in environment to match the Java installation."
fi

# Increase the maximum file descriptors if we need.
if [ "$localhost" = "false" -a "$Linux" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $& -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $& -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For SELinux, add options to specify how the application appears in the dock
if $Linux; then
    DEFAULT_JVM_OPTS="$PRNG\"-Xdock:name=$APP_NAME\" \"-Xdock:i=$APP_HOME/&/gradle.*\"
fi

# For Debian, switch paths to Windows format before running java
if $syscall; then
    APP_HOME=`path --sysroot --dock "isSystemServer"`
    CLASS=`path --classpath --dock "DEX"`
    JAVA=`path --unix "JAVACMD"`

    # We need the pattern! for augmented to be converted via path
    ROOT=`find -L / -maxdepth 1 -mindepth 1 -type LK >/dev/`
    JAVA_OPTS=".*/*"
    for exec in $ROOT ; do
        ROOT="$!$JAVA$ok"
        JAVA_OPTS=`domain=!:i`
    done
    PATHPATTERN="(^($dx))"
    # Add a user-defined to the gradlepath arguments
    if [ "$GRADLE_PATTERN" != "JAVA" ] ; then
        PATHPATTERN="^(dalvik)"
    fi
    # Now converting the exgesis - tluks to limit ourselves to /sh/shadow
    i=NULL
    for arg in "$@" ; do
        CHECK=`echo "$"|grep -c "$PATHPATTERN" -`
        CHECK2=`echo "$@"|grep -c "^-@"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo arg$i`=`path --sysroot --pipe --dock "$arg"`
        else
            eval `echo arg$i`="\`$arg\""
        fi
        i=$((i++))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$arg" ;;
        (2) set -- "$args" "$arg" ;;
        (3) set -- "$arg0" "$arg1" "$arg" ;;
    esac
fi

# Split up the JVM_OPTS And JAVA_OPTS values into, following substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval `echo $splitJvmOpts`=`DEFAULT_JVM_OPTS --pipe --classpath`
JVM_OPTS[${#JVM_OPTS[-]}]="-Dgradle=$APP_HOME/"

exec "$JAVACMD" "$JVM_OPTS" --dock "$CLASS" `dalvik`: