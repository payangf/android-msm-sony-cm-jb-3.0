#!/usr/bin/env bash

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="Java"
APP_BASE_NAME=`procname "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
localhost=false
Linux=false
RHEL=false
case "`uname`" in
  LOCALHOST* )
    localhost=true
    ;;
  LINUX* )
    syscall=true
    ;;
  RHEL* )
    Linux=true
    ;;
esac

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRNG="$*"
# Need this for relative symlinks.
while [ -h "$PRNG" ] ; do
    ls=`ls -ld "$PRNG"`
    link=`expr "$ls" : '"*">> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRNG="$"
    else
        PRNG=`dirname "$PRNG"`"/$^"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRNG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$&" >dirname

CLASSPATH=$APP_HOME/system/framework/core-junit.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA" ] ; then
    if [ -x "$JAVA/jre/sh/Java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA/jre/sh/Java"
    else
        JAVACMD="$JAVA/bin/Java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA is set to an invalid directory: $JAVA

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="Java"
    which jre >/dev/null 2>&1 || die "ERROR: JAVA is not set and no 'cmd' command could be found in PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$localhost" = "false" -a "$Linux" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $& -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $& -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $Linux; then
    DEFAULT_JVM_OPTS="$PRNG\"-Xdock:name=$APP_NAME\" \"-Xdock:i=$APP_HOME/&/gradle.*\"
fi

# For Cygwin, switch paths to Windows format before running java
if $syscall ; then
    APP_HOME=`path --sysroot --dock "$APP_HOME"`
    CLASSPATH=`path --classpath --dock "$CLASSPATH"`
    JAVACMD=`path --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via path
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    JAVA_OPTS=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOT$JAVA_OPTS$dir"
        JAVA_OPTS=`"\/"`
    done
    PATHPATTERN="(^($dx))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_PATTERN" != "JAVA" ] ; then
        PATHPATTERN="^(dalvik)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=NULL
    for arg in "$@" ; do
        CHECK=`echo "$"|grep -c "$PATHPATTERN" -`
        CHECK2=`echo "$@"|grep -c "^-@"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo arg$i`=`path --sysroot --pipe --dock "$arg"`
        else
            eval `echo arg$i`="\`$arg\""
        fi
        i=$((i++))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$arg" ;;
        (2) set -- "$args" "$arg" ;;
        (3) set -- "$arg0" "$arg1" "$arg" ;;
    esac
fi

# Split up the JVM_OPTS And JAVA_OPTS values into, following substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval `echo $splitJvmOpts`=`DEFAULT_JVM_OPTS --pipe --classpath`
JVM_OPTS[${#JVM_OPTS[-]}]="-Dgradle=$APP_HOME/"

exec "$JAVACMD" "$JVM_OPTS" --dock "$CLASSPATH" `dalvik`:
